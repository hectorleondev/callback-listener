repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.11

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
      - id: check-case-conflict
      - id: check-docstring-first
      - id: debug-statements

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "app/"]
        exclude: tests/

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      # Enforce changelog entry on commit
      - id: changelog-entry
        name: Changelog Entry Required
        entry: python scripts/check_changelog.py
        language: python
        stages: [commit-msg]
        always_run: true

      # Run tests before commit
      - id: pytest-check
        name: pytest-check
        entry: pytest
        language: system
        types: [python]
        stages: [push]
        args: [--tb=short, -q]

      # Check for environment file
      - id: env-file-check
        name: Environment file check
        entry: python -c "import os; exit(0 if os.path.exists('.env') else print('Create .env file from .env.example'))"
        language: system
        files: ^\.env\.example$
        always_run: true
